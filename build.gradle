buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "jacoco"
    id "maven"
}

project.apply {
    group = project_group
    version = project_version
}

repositories {
    mavenCentral()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/reports/jacoco")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.5.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}

jar {
    manifest { extendManifest(it) }
}

void extendManifest(Manifest mf) {
    mf.attributes(
            'group': project.group,
            'artifact': project.name,
            'version': project.version)
}

test {
    useJUnitPlatform() {
        systemProperty 'junit.jupiter.testinstance.lifecycle.default', 'per_class'
    }
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

test.finalizedBy(jacocoTestReport)

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
    manifest { extendManifest(it) }
}

task mavenPom {
    doLast {
        pom {
            project {
                groupId project.group
                artifactId project.name
                version project.version

                inceptionYear '2019'
                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("${buildDir.name}/$libsDirName/${project.name}-${project.version}.pom")
    }
}

task bintrayRelease {
    dependsOn clean, test, jar, mavenPom, sourceJar
}
