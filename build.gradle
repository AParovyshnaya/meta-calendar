/*******************************************************************************
 * Copyright (c) 2019, 2020 CleverClover
 *
 * This program and the accompanying materials are made available under the
 * terms of the MIT which is available at
 * https://spdx.org/licenses/MIT.html#licenseText
 *
 * SPDX-License-Identifier: MIT
 *
 * Contributors:
 *     CleverClover - initial API and implementation
 *******************************************************************************/
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "jacoco"
    id 'org.jetbrains.dokka' version '0.10.0'
    id "maven-publish"
}

project.apply {
    group = project_group
    version = project_version
}

repositories {
    mavenCentral()
    jcenter()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/reports/jacoco")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.5.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}

jar {
    manifest { extendManifest(it) }
}

void extendManifest(Manifest mf) {
    mf.attributes(
            'group': project.group,
            'artifact': project.name,
            'version': project.version,
            'vendor': "$project_vendor"
    )
}

test {
    useJUnitPlatform() {
        systemProperty 'junit.jupiter.testinstance.lifecycle.default', 'per_class'
    }
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

test.finalizedBy(jacocoTestReport)

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

dokka {
    outputFormat = 'html'
}

javadocJar {
    dependsOn += "dokka"
    from dokka.outputDirectory
}

sourcesJar {
    from sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME).getAllSource(),
            sourceSets.getByName(SourceSet.TEST_SOURCE_SET_NAME).getAllSource(),
            file("README.md")
}

publishing {
    publications {
        MavenIsh(MavenPublication) {
            artifactId project.name
            groupId project.group
            from components.java
            pom {
                name = project.name
                description = "$project_description"
                url = 'https://github.com/eparovyshnaya/meta-calendar'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://spdx.org/licenses/MIT.html#licenseText'
                    }
                }
                developers {
                    developer {
                        id = 'eparovyhsnaya'
                        name = 'Elena Parovyshnaia'
                        email = 'elena.parovyshnaya@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/eparovyshnaya/meta-calendar.git'
                    developerConnection = 'scm:git:ssh://github.com/eparovyshnaya/meta-calendar.gitt'
                    url = 'https://github.com/eparovyshnaya/meta-calendar'
                }
                repositories {
                    maven {
                        // change URLs to point to your repos, e.g. http://my.org/repo
                        String releasesRepoUrl = "$buildDir/repos/releases"
                        String snapshotsRepoUrl = "$buildDir/repos/snapshots"
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    }
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
